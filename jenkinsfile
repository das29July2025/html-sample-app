pipeline {
    agent any

    environment {
        SONAR_HOME = 'C:\\Users\\Administrator\\Documents\\tools\\Sonarscanner\\bin'
        REPO_NAME  = 'https://github.com/das29July2025/html-sample-app.git'
        BRANCH_NAME = 'master'
        SONAR_TOKEN  = credentials('DAS-SONARQUEBE-SECRETKEY')
        DOCKER_CREDS = 'das-dockercredential'
        SONAR_PROJECT_KEY = 'DAS-SONARQUBE-JENKINFILES'
        SONAR_SERVER_NAME = 'DAS-SONARQUBE'
        SONAR_HOST_URL = 'http://your-sonarqube-server-url' // Replace with actual SonarQube URL\
        
    }

    stages {
        stage('Testing and verifying required commands') {
            steps {
                echo 'Hello World'
                bat """
                %SONAR_HOME%\\sonar-scanner --version
                echo == Checking Docker ==
                docker version
                echo ==> Java version ==>
                java --version
                echo == Checking Git version ==
                git version
                """
            }
        }

        stage('Clone GitHub repository') {
            steps {
                echo 'Cloning repository...'
                git url: "${REPO_NAME}", branch: "${BRANCH_NAME}"
            }
        }

        stage('SAST with SonarScanner') {
            steps {
                echo 'Running SonarScanner...'
                script {
                    withSonarQubeEnv("${SONAR_SERVER_NAME}") {
                        bat """
                        %SONAR_HOME%\\sonar-scanner ^
                        -Dsonar.projectKey=${SONAR_PROJECT_KEY} ^
                        -Dsonar.sources=. ^
                        -Dsonar.host.url=${SONAR_HOST_URL} ^
                        -Dsonar.token=${SONAR_TOKEN}
                        """
                    }
                }
            }
        }

        stage('Build Docker image') {
            steps {
                echo 'Building Docker image...'
                script {
                    def imageName = "dasdockerhubjuly30/daswebapp-iis-ltsc2022"
                    def imageTag = "codev30"
                    docker.build("${imageName}:${imageTag}", ".")
                }
                bat 'docker images | findstr daswebapp'
            }
        }

        /*stage('Trivy Scan') {
            steps {
                echo 'Running Trivy scan...'
                bat '''
                trivy image --severity HIGH,CRITICAL --format table -o report.txt --skip-version-check dasdockerhubjuly30/daswebapp-iis-ltsc2022:codev30
                findstr /I "HIGH CRITICAL" report.txt >nul

                if %errorlevel% == 0 (
                    echo [ERROR] High or Critical vulnerabilities found.
                    exit /b 1
                ) else (
                    echo No high or critical vulnerabilities found.
                )
                '''
            }
        }*/

        stage('Push Docker image to Docker Hub') {
            steps {
                echo 'Pushing Docker image...'
                script {
                    def imageName = "dasdockerhubjuly30/daswebapp-iis-ltsc2022"
                    def imageTag = "codev30"
                    def hubCred = "${DOCKER_CREDS}"
                    docker.withRegistry('https://registry.hub.docker.com', hubCred) {
                        docker.image("${imageName}:${imageTag}").push()
                    }
                }
            }
        }
    }
}
